// <auto-generated />
using System;
using Med.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Med.Infrastructure.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250511230633_EncryptData")]
    partial class EncryptData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Med.Domain.Entites.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("Med.Domain.Entites.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Med.Domain.Entites.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a4c0f8e-b28b-4e1b-a4ea-5a4b79fd9b6c"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("2c9d2f77-6c1e-4b47-83f0-f2d1ab3147f5"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dermatologia"
                        },
                        new
                        {
                            Id = new Guid("9d3b5c38-61c4-4bc6-b9ea-3acdb148c1ee"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ortopedia"
                        },
                        new
                        {
                            Id = new Guid("79c5e160-9de3-446a-b44c-9b6a982cc4f0"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Neurologia"
                        },
                        new
                        {
                            Id = new Guid("87d7a295-0a4e-4c88-9367-0d83a746e6a7"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Endocrinologia"
                        },
                        new
                        {
                            Id = new Guid("5811db18-b55b-4f34-95cf-11f3f0f89193"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ginecologia e Obstetrícia"
                        },
                        new
                        {
                            Id = new Guid("fde82618-bb0d-4a27-b232-3d3c204f00b4"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Psiquiatria"
                        },
                        new
                        {
                            Id = new Guid("3f4a6e72-e22c-4ae0-ae7e-7201c6ddc9c2"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pediatria"
                        },
                        new
                        {
                            Id = new Guid("b2bc226c-96d3-401f-88e2-70e62f66ae8f"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gastroenterologia"
                        },
                        new
                        {
                            Id = new Guid("a8e05346-29e6-4f30-94e2-e4ecf77b0d4b"),
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Urologia"
                        });
                });

            modelBuilder.Entity("Med.Domain.Entites.Doctor", b =>
                {
                    b.HasOne("Med.Domain.Entites.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Med.SharedKernel.DomainObjects.CRM", "CRM", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CRM");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.Navigation("CRM")
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Med.Domain.Entites.Patient", b =>
                {
                    b.OwnsOne("Med.SharedKernel.DomainObjects.CPF", "CPF", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CPF");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("Med.SharedKernel.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("CPF")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Med.Domain.Entites.Speciality", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
